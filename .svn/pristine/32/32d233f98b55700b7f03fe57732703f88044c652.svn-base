#include "colors.h"
#include "./main/episode.h"
#include <QtGui/QColorDialog>

ColorsDlg::ColorsDlg(QWidget *parent)
: QDialog(parent)
{
	setupUi(this);

	label_1->setAutoFillBackground(true);
	label_2->setAutoFillBackground(true);

	EnvironmentPtr pEnv;
	m_colors = pEnv->colorSchemes();

	for (int i = Rt; i < MaxData; ++i)
	{
		DataIndex index = static_cast<DataIndex>(i);
		if (pEnv->isVisible(index))
		{
			comboBox->addItem(pEnv->channelTitle(index), i);
		}
	}

	for (int i = 0; i < Episode::All; ++i)
	{
		comboBox->addItem(pEnv->episodeTitle(i), i + MaxData);
	}

	connect(comboBox, SIGNAL(currentIndexChanged(int)), this, SLOT(selectionChanged(int)));
	comboBox->setCurrentIndex(0);
	selectionChanged(0);

	connect(pushButton_1, SIGNAL(clicked()), this, SLOT(foregroundChanged()));
	connect(pushButton_2, SIGNAL(clicked()), this, SLOT(backgroundChanged()));
}

void ColorsDlg::selectionChanged(int index)
{
	ColorScheme cs = m_colors.at(comboBox->itemData(index).toInt());
	changeColor(label_1, cs.first);
	changeColor(label_2, cs.second);
}

void ColorsDlg::changeColor(QLabel *label, const QColor &color)
{
	QPalette palette = label->palette();
	palette.setColor(QPalette::Active,		QPalette::Background, color);
	palette.setColor(QPalette::Inactive,	QPalette::Background, color);
	label->setPalette(palette);
}

void ColorsDlg::foregroundChanged()
{
	int i = comboBox->itemData(comboBox->currentIndex()).toInt();
	ColorScheme cs = m_colors.at(i);
	cs.first = QColorDialog::getColor(cs.first, this, tr("Выберите цвет линии"));
	m_colors[i] = cs;
	selectionChanged(comboBox->currentIndex());
}

void ColorsDlg::backgroundChanged()
{
	int i = comboBox->itemData(comboBox->currentIndex()).toInt();
	ColorScheme cs = m_colors.at(i);
	cs.second = QColorDialog::getColor(cs.second, this,	tr("Выберите цвет фона"));
	m_colors[i] = cs;
	selectionChanged(comboBox->currentIndex());
}

void ColorsDlg::accept()
{
	EnvironmentPtr pEnv;
	pEnv->setColorSchemes(m_colors);
	QDialog::accept();
}