#include "cannwnd.h"

#include "trends/trends.h"
#include "trends/cannula.h"

#include <QtCore/QEvent>
#include <QtGui/QStylePainter>
#include <QtGui/QWheelEvent>
#include <QtGui/QApplication>
#include "episodetypeselectwnd.h"

CannWnd::CannWnd(QWidget *parent)
:	QWidget(parent),
	m_curve(new DataCurve(Cann))
{
	setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
	setFocusPolicy(Qt::StrongFocus);

	m_layout = new QHBoxLayout();

	Scale::UnitList scales;
	scales.push_back(Scale::UnitList::value_type("0.25",	"x6"));
	scales.push_back(Scale::UnitList::value_type("0.5",		"x5"));
	scales.push_back(Scale::UnitList::value_type("1.0",		"x4"));
	scales.push_back(Scale::UnitList::value_type("2.0",		"x3"));
	scales.push_back(Scale::UnitList::value_type("4.0",		"x2"));
	scales.push_back(Scale::UnitList::value_type("8.0",		"x1"));
	const int startIndex = 4;
	m_scale = new ScaleWnd(Cann, scales, startIndex, ScaleWnd::Zooming);

	m_view = new QWidget();
	m_layout->addWidget(m_scale);
	m_layout->addWidget(m_view);
	m_layout->setContentsMargins(0, 0, 0, 0);
	m_layout->setSpacing(0);

	EnvironmentPtr pEnv;
	if (pEnv->testOption(chooseDefaultEpisodeTypeWidget))
	{
		QWidget *cdet = new EpisodeTypeSelectWidget(Cann); 
		m_layout->addWidget(cdet);
		connect(cdet, SIGNAL(doUpdateView()), this,	SIGNAL(doUpdateView()));
	}

	setLayout(m_layout);

	m_view->installEventFilter(this);
	setScale(*(scales.begin() + startIndex));
	connect(m_scale, SIGNAL(scaleChanged(Scale::Unit)), this, SLOT(setScale(Scale::Unit)));
	connect(m_scale, SIGNAL(zeroChanged(int)),			this, SLOT(setZero(int)));

	m_zero = 0;
}

CannWnd::~CannWnd()
{
	delete m_curve;
}

void CannWnd::placeEpisodes()
{
	EnvironmentPtr	pEnv;
	int				start	= pEnv->currentSecond();
	int				end		= start + pEnv->secsPerScreen();

	QSqlQuery		query;
	query.prepare("SELECT * FROM episodes WHERE ((bsec BETWEEN ? AND ?) OR (esec BETWEEN ? AND ?) OR (bsec <= ? AND ? <= esec));");
	//query.prepare("SELECT * FROM episodes WHERE ((type = ?) OR (type = ?)) AND ((bsec BETWEEN ? AND ?) OR (esec BETWEEN ? AND ?) OR (bsec <= ? AND ? <= esec));");
	//query.addBindValue(Episode::Hypopnea);
	//query.addBindValue(Episode::ObstrApnea);
	query.addBindValue(start);
	query.addBindValue(end);
	query.addBindValue(start);
	query.addBindValue(end);
	query.addBindValue(start);
	query.addBindValue(end);
	query.exec();

	while (query.next())
	{
		Episode e(query);
		if ((1<<e.type()) & pEnv->episodeShow(Cann))
		{
			m_ews.push_back(new EpisodeWnd(e, m_view, this));

			m_ews.last()->setGeometry(((e.bsec() - start) * m_view->rect().width()) / ((qint64)pEnv->secsPerScreen()), 1, (e.length() * m_view->rect().width()) / pEnv->secsPerScreen(), m_view->rect().height() - 3);
			m_ews.last()->show();
		}
	}

	query.clear();
}

void CannWnd::clearEpisodes()
{
	qDeleteAll(m_ews);
	m_ews.clear();
}

void CannWnd::scale_Change(int Index)
{
	switch (Index)
	{
	case -1:
		{
			m_scale->zoomOut();
		}
		break;
	case 1:
		{
			m_scale->zoomIn();
		}
		break;
	}
}

void CannWnd::setScale(const Scale::Unit &scale)
{
	m_curve->setZoom(scale.first.toDouble());
	m_view->update();
}

void CannWnd::setZero(int zero)
{
	m_zero = zero;
	m_view->update();
}

void CannWnd::resizeEvent(QResizeEvent *event)
{
	EnvironmentPtr pEnv;
	for (int i = 0; i < m_ews.size(); ++i)
	{
		QVariant	bsec	= m_ews[i]->property("bsec"),
					length	= m_ews[i]->property("length");
		m_ews[i]->setGeometry(((bsec.toInt() - pEnv->currentSecond()) * m_view->rect().width()) / pEnv->secsPerScreen(), m_view->rect().top() + 1, (length.toInt() * m_view->rect().width()) / pEnv->secsPerScreen(), m_view->geometry().height() - 2);
	}
}

bool CannWnd::eventFilter(QObject *target, QEvent *e)
{
	bool needUpdate = false;
	if (target == m_view)
	{
		if (e->type() == QEvent::Paint)
		{
			needUpdate = true;
		}
		else if (e->type() == QEvent::MouseButtonPress)
		{
			QMouseEvent *me = dynamic_cast<QMouseEvent *>(e);

			if (me->buttons() & Qt::LeftButton)
			{
				EnvironmentPtr pEnv;
				if (pEnv->testOption(MarkMode))
				{
					int bsec = pEnv->currentSecond() + (me->pos().x() * pEnv->secsPerScreen()) / m_view->width();//,
						//kind = QApplication::keyboardModifiers().testFlag(Qt::ControlModifier) ? Episode::Hypopnea : Episode::ObstrApnea;//Если зажат Ctrl гипопноэ, иначе обструктивное
					
					Episode episode(bsec, bsec + 10, pEnv->episodeType(Cann));
					if (episode.insert())
					{
						m_ews.push_back(new EpisodeWnd(episode, m_view, this));
						m_ews.last()->setGeometry(((episode.bsec() - pEnv->currentSecond()) * m_view->rect().width()) / pEnv->secsPerScreen(), m_view->rect().top() + 1, (episode.length() * m_view->rect().width()) / pEnv->secsPerScreen(), m_view->rect().height() - 2);
						m_ews.last()->show();

						emit doUpdateView();
					}
				}
			}
		}
	}

	bool res = QWidget::eventFilter(target, e);

	if (needUpdate)
	{
		onPaintView();
	}

	return res;
}

void CannWnd::onPaintView()
{
	m_pixmap = QPixmap(size());
	m_pixmap.fill(m_view, 0, 0);
	QPainter painter(&m_pixmap);
	painter.initFrom(m_view);

	EnvironmentPtr pEnv;
	m_curve->setSampleCount(pEnv->samplePerScreen());
	m_curve->setSampleStart(pEnv->currentSample());

	ColorScheme cs = pEnv->colorScheme(m_curve->index());
	painter.fillRect(m_view->rect(), cs.second);
	painter.setPen(cs.first);

	m_curve->draw(&painter, m_view->rect(), m_zero);
	
	if (m_scale->showRawData)
	{
		RawData			rdata(pEnv->samplePerScreen());
		//double			mv = pEnv->load(m_curve->index(), pEnv->samplePerScreen(), rdata);
		RawData can(pEnv->samplePerScreen());		// данные для CANN
		RawData smoothed(pEnv->samplePerScreen());	// буфер для сглаженной кривой
															//QVector<RawData> temp_Trend_Data(3 * secPerUnit()); //Циклическое хранилище, для временных данных
		pEnv->load(Cann, pEnv->currentSample(), can);
		
		TrendsPtr	ptr;
		Trend		*trend = ptr->trends().at(CANN);
		if (Cannula	*pCannula = dynamic_cast<Cannula*>(trend))
		{
			Cannula::Waves temp;
			pCannula->build(can, smoothed, temp);

			/////////Smoothed output
			RawData			rdata(pEnv->samplePerScreen());
			double			mv = pEnv->load(m_curve->index(), pEnv->samplePerScreen(), rdata);
	
			painter.setBrush(Qt::red);
			painter.setPen(Qt::red);
			RawData::value_type average = 0;
			for (int i = 0; i < smoothed.size(); ++i)
			{
				average += smoothed[i];
			}
			average /= smoothed.size();

			double	factor		= -m_view->rect().height() / (m_curve->zoom() * mv),
					zeroPoint	= m_view->rect().top() + m_view->rect().height() / 2;

			QPolygonF curve_0(smoothed.size());
			for (int i = 0; i < curve_0.size(); ++i)
			{
				double	x = ((double)i * m_view->rect().width()) / smoothed.size() + m_view->rect().left(),
						y = zeroPoint - (smoothed[i] - average) * factor;
				curve_0[i] = QPointF(x, y);
			}

			painter.drawPolyline(curve_0);

			//////////


			painter.setBrush(cs.first);
			painter.setPen(cs.first);

			int xOffset = painter.fontMetrics().averageCharWidth(),
				yOffset = painter.fontMetrics().height() + 3;

			for (int i = 0; i < temp.size() - 1; ++i)
			{
				//Debug
				painter.setBrush(Qt::blue);
				painter.setPen(Qt::blue);

				qreal	x_1		= (m_view->rect().width() * (temp[i].mnPos) / (pEnv->samplePerScreen()));
				QPolygonF curve_1;
				curve_1 << QPointF(x_1, 1);
				curve_1 << QPointF(x_1, m_view->rect().bottom() - 1);
				painter.drawPolyline(curve_1);

				painter.setBrush(Qt::green);
				painter.setPen(Qt::green);

				qreal	x_2		= (m_view->rect().width() * (temp[i].mxPos) / (pEnv->samplePerScreen()));
				QPolygonF curve_2;
				curve_2 << QPointF(x_2, 1);
				curve_2 << QPointF(x_2, m_view->rect().bottom() - 1);
				painter.drawPolyline(curve_2);
				//Debug

				qreal	x		= (m_view->rect().width() * (temp[i].mnPos + temp[i].mxPos) / (2 * pEnv->samplePerScreen())),
						y		= m_view->rect().height() / 2;
			
				painter.setBrush(Qt::black);
				painter.setPen(Qt::black);
				painter.drawEllipse(QPointF(x, y), 2, 2);
				painter.rotate(-90.0);
				QPointF point((- y + 3), x + xOffset);
				painter.drawText(point, QString("%1").arg(temp[i].amplitude));//can[temp[i].mxPos] - can[temp[i].mnPos]));//temp[i].spo2));
				painter.rotate(90.0);

				qreal	x1		= (m_view->rect().width() * (temp[i].mnPos + temp[i].mxPos) / (2 * pEnv->samplePerScreen())),
						y1		= 50 + m_view->rect().height() / 2;
			
				painter.setBrush(Qt::black);
				painter.setPen(Qt::black);
				painter.drawEllipse(QPointF(x1, y1), 2, 2);
				painter.rotate(-90.0);
				QPointF point1((- y1 + 3), x1 + xOffset);
				painter.drawText(point1, QString("%1").arg(can[temp[i].mnPos]));
				painter.rotate(90.0);

				qreal	x2		= (m_view->rect().width() * (temp[i].mnPos + temp[i].mxPos) / (2 * pEnv->samplePerScreen())),
						y2		= -50 + m_view->rect().height() / 2;
			
				painter.setBrush(Qt::black);
				painter.setPen(Qt::black);
				painter.drawEllipse(QPointF(x2, y2), 2, 2);
				painter.rotate(-90.0);
				QPointF point2((- y2 + 3), x2 + xOffset);
				painter.drawText(point2, QString("%1").arg(can[temp[i].mxPos]));
				painter.rotate(90.0);

				if (i >= 1)
				{
					qreal	x3		= (m_view->rect().width() * (temp[i].mnPos + temp[i].mxPos) / (2 * pEnv->samplePerScreen())) + 20,
							y3		= m_view->rect().height() / 2;
			
					painter.setBrush(Qt::black);
					painter.setPen(Qt::black);
					painter.drawEllipse(QPointF(x3, y3), 2, 2);
					painter.rotate(-90.0);
					QPointF point3((- y3 + 3), x3 + xOffset);
					painter.drawText(point3, QString("%1").arg(100 * (can[temp[i].mxPos] - can[temp[i].mnPos]) / (can[temp[i - 1].mxPos] - can[temp[i - 1].mnPos])));
					painter.rotate(90.0);
				}
			}

			painter.setBrush(Qt::NoBrush);
			painter.setPen(Qt::NoPen);
		}
	}

	QStylePainter stylePainter(m_view);
	stylePainter.drawPixmap(0, 0, m_pixmap);
}

void CannWnd::deleteEpisode(Episode episode)
{
	for (int i = 0; i < m_ews.size(); i++)
	{		
		if (m_ews[i]->getEpisodeId() == episode.id())
		{
			m_ews.removeAt(i);
			emit doUpdateView();
			break;
		}
	}
}