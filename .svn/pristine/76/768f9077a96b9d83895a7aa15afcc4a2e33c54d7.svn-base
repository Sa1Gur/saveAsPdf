#include "redwnd.h"
#include "trends/trends.h"
#include "trends/spo2.h"
#include <QtCore/QEvent>
#include <QtGui/QStylePainter>
#include <QtGui/QWheelEvent>
#include <QtGui/QApplication>
#include "episodewnd.h"

RedWnd::RedWnd(QWidget *parent)
:	QWidget(parent),
	m_curve(new DataCurve(Red))
{
	setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
	setFocusPolicy(Qt::StrongFocus);

	m_layout = new QHBoxLayout();

	Scale::UnitList scales;
	scales.push_back(Scale::UnitList::value_type("0.25",	"x6"));
	scales.push_back(Scale::UnitList::value_type("0.5",		"x5"));
	scales.push_back(Scale::UnitList::value_type("1.0",		"x4"));
	scales.push_back(Scale::UnitList::value_type("2.0",		"x3"));
	scales.push_back(Scale::UnitList::value_type("4.0",		"x2"));
	scales.push_back(Scale::UnitList::value_type("8.0",		"x1"));
	Scale::UnitList ranges;
	ranges.push_back(Scale::UnitList::value_type("110", "70"));
	ranges.push_back(Scale::UnitList::value_type("70",	"30"));
	ranges.push_back(Scale::UnitList::value_type("30",	"-10"));
	const int startIndex = 4;
	m_scale = new ScaleWnd(Red, scales, startIndex, ScaleWnd::Zooming);

	m_view = new QWidget();
	m_layout->addWidget(m_scale);
	m_layout->addWidget(m_view);
	m_layout->setContentsMargins(0, 0, 0, 0);
	m_layout->setSpacing(0);
	setLayout(m_layout);

	m_view->installEventFilter(this);
	setScale(*(scales.begin() + startIndex));
	setRange(*(ranges.begin() + 0));
	connect(m_scale, SIGNAL(scaleChanged(Scale::Unit)), this, SLOT(setScale(Scale::Unit)));
	connect(m_scale, SIGNAL(zeroChanged(int)),			this, SLOT(setZero(int)));
}

RedWnd::~RedWnd()
{
	delete m_curve;
}

void RedWnd::placeEpisodes()
{
	EnvironmentPtr pEnv;
	int start	= pEnv->currentSecond(),
		end		= pEnv->currentSecond() + pEnv->secsPerScreen();

	QSqlQuery query;
	query.prepare("SELECT * FROM episodes WHERE ((type = ?) OR (type = ?)) AND ((bsec BETWEEN ? AND ?) OR (esec BETWEEN ? AND ?));");
	query.addBindValue(Episode::Hypopnea);
	query.addBindValue(Episode::ObstrApnea);
	query.addBindValue(start);
	query.addBindValue(end);
	query.addBindValue(start);
	query.addBindValue(end);
	query.exec();

	while (query.next())
	{
		Episode e(query);
		
		m_ews.push_back(new EpisodeWnd(e, m_view));
		m_ews.last()->setGeometry(((e.bsec() - start) * m_view->rect().width()) / pEnv->secsPerScreen(), 1,	(e.length() * m_view->rect().width()) / pEnv->secsPerScreen(), m_view->rect().height() - 3);
		m_ews.last()->show();
	}

	query.clear();
}

void RedWnd::clearEpisodes()
{
	qDeleteAll(m_ews);
	m_ews.clear();
}

void RedWnd::setRange(const Scale::Unit &range)
{
	m_upper = range.first.toInt();
	m_lower = range.second.toInt();
	m_view->update();
}

void RedWnd::setScale(const Scale::Unit &scale)
{
	m_curve->setZoom(scale.first.toDouble());
	m_view->update();
}

void RedWnd::setZero(int zero)
{
	m_zero = zero;
	m_view->update();
}

void RedWnd::resizeEvent(QResizeEvent *event)
{
	EnvironmentPtr pEnv;
	for (int i = 0; i < m_ews.size(); ++i)
	{
		QVariant	bsec	= m_ews[i]->property("bsec"),
					length	= m_ews[i]->property("length");
		m_ews[i]->setGeometry(((bsec.toInt() - pEnv->currentSecond()) * m_view->rect().width()) / pEnv->secsPerScreen(), m_view->rect().top() + 1, (length.toInt() * m_view->rect().width()) / pEnv->secsPerScreen(), m_view->geometry().height() - 2);
	}
}

bool RedWnd::eventFilter(QObject *target, QEvent *e)
{
	bool needUpdate = false;
	if (target == m_view)
	{
		if (e->type() == QEvent::Paint)
		{
			needUpdate = true;
		}
		else if (e->type() == QEvent::MouseButtonPress)
		{
			QMouseEvent *me = dynamic_cast<QMouseEvent *>(e);

			if (me->buttons() & Qt::LeftButton)
			{
				EnvironmentPtr pEnv;
				if (pEnv->testOption(MarkMode))
				{
					int bsec = pEnv->currentSecond() + (me->pos().x() * pEnv->secsPerScreen()) / m_view->width();

					//int kind = QApplication::keyboardModifiers().testFlag(Qt::ControlModifier) ? Episode::Hypopnea : Episode::ObstrApnea;
					
					//Episode episode(bsec, bsec + 10, kind);
					//if (episode.insert())
					//{
					TrendsPtr	ptr;
					Trend		*trend = ptr->trends().at(SPO2);
					if (Spo2	*pSpo2 = dynamic_cast<Spo2*>(trend))
					{
						Episode episode(bsec, bsec + 10, Episode::Desaturation, pSpo2->values().value(bsec, 0), pSpo2->values().value(bsec + 10, 0));
						episode.insert();

						m_ews.push_back(new EpisodeWnd(episode, m_view));
						m_ews.last()->setGeometry(((episode.bsec() - pEnv->currentSecond()) * m_view->rect().width()) / pEnv->secsPerScreen(), m_view->rect().top() + 1, (episode.length() * m_view->rect().width()) / pEnv->secsPerScreen(), m_view->rect().height() - 2);
						m_ews.last()->show();
					}
				}
			}
		}
	}

	bool res = QWidget::eventFilter(target, e);

	if (needUpdate)
	{
		onPaintView();
	}

	return res;
}

void RedWnd::onPaintView()
{
	m_pixmap = QPixmap(size());
	m_pixmap.fill(m_view, 0, 0);
	QPainter painter(&m_pixmap);
	painter.initFrom(m_view);

	EnvironmentPtr pEnv;
	m_curve->setSampleCount(pEnv->samplePerScreen());
	m_curve->setSampleStart(pEnv->currentSample());

	ColorScheme cs = pEnv->colorScheme(m_curve->index());
	painter.fillRect(m_view->rect(), cs.second);
	painter.setPen(cs.first);

	m_curve->draw(&painter, m_view->rect());
	
	RawData			rdata(pEnv->samplePerScreen());
	double			mv = pEnv->load(m_curve->index(), pEnv->samplePerScreen(), rdata);
	RawData ir(pEnv->samplePerScreen());		// данные для IR
	RawData red(pEnv->samplePerScreen());		// данные для RED
	RawData smoothed(pEnv->samplePerScreen());	// буфер для сглаженной кривой
	
	//QVector<RawData> temp_Trend_Data(3 * secPerUnit()); //Циклическое хранилище, для временных данных
	pEnv->load(Ir,	pEnv->currentSample(), ir);
	pEnv->load(Red, pEnv->currentSample(), red);
	
	TrendsPtr	ptr;
	Trend		*trend = ptr->trends().at(SPO2);
	if (Spo2	*pSpo2 = dynamic_cast<Spo2*>(trend))
	{
		Spo2::Waves temp;	
		pSpo2->build(ir, red, smoothed, pEnv->currentSample(), temp, false);

		painter.setBrush(cs.first);
		painter.setPen(cs.first);

		int xOffset = painter.fontMetrics().averageCharWidth(),
			yOffset = painter.fontMetrics().height() + 3;

		for (int i = 0; i < temp.size() - 1; ++i)//, j = pEnv->currentSecond(); i < pEnv->secsPerScreen(); ++i, ++j)
		{
			int		value1	= temp[i].spo2,//pSpo2->values().value(j,		0),
					value2	= temp[i + 1].spo2,//pSpo2->values().value(j + 1,	0);
					_value1	= temp[i].spo2 + m_zero,
					_value2	= temp[i + 1].spo2 + m_zero;

			qreal	x		= (m_view->rect().width() * (temp[i].mnPos + temp[i].mxPos) / (2 * pEnv->samplePerScreen())),// * (m_view->rect().width()) / pEnv->secsPerScreen(),
					y		= (_value1 > m_upper) ? 1 : (_value1 < m_lower) ? (m_view->rect().bottom() - 1) :	((_value1 - m_upper) * m_view->rect().height()) / (m_lower - m_upper);
			
			if (value1 != Spo2Params::fakeValue && value2 != Spo2Params::fakeValue)
			{
				QPolygonF curve;
				curve << QPointF(x, y);
				curve << QPointF(((i + 1) * m_view->rect().width()) / pEnv->secsPerScreen(), (_value2 > m_upper) ? 1 : (_value2 < m_lower) ? (m_view->rect().bottom() - 1) : ((_value2 - m_upper) * m_view->rect().height()) / (m_lower - m_upper));
				//painter.drawPolyline(curve);//Некорректно соединяет
				
				if (pEnv->msecsPerScreen() <= TWO_MIN)
				{
					painter.setBrush(Qt::black);
					painter.setPen(Qt::black);
					painter.drawEllipse(QPointF(x, y), 2, 2);
					painter.rotate(-90.0);
					QPointF point((value1 > m_upper) ? (- y - yOffset) : (- y + 3), x + xOffset);
					painter.drawText(point, QString("%1").arg(value1));
					painter.rotate(90.0);
				}
			}
			else if (value1 != Spo2Params::fakeValue && value2 == Spo2Params::fakeValue)
			{
				if (pEnv->msecsPerScreen() <= TWO_MIN)
				{
					painter.setBrush(Qt::black);
					painter.setPen(Qt::black);
					painter.drawEllipse(QPointF(x, y), 2, 2);
					painter.rotate(-90.0);
					QPointF point((_value1 > m_upper) ? (- y - yOffset) : (- y + 3), x + xOffset);
					painter.drawText(point, QString("%1").arg(value1));
					painter.rotate(90.0);
				}
			}

			pSpo2->values();
		}

		painter.setBrush(Qt::NoBrush);
		painter.setPen(Qt::NoPen);
	}
	
	QStylePainter stylePainter(m_view);
	stylePainter.drawPixmap(0, 0, m_pixmap);
}